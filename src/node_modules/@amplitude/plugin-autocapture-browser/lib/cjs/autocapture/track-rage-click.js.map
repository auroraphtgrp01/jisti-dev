{"version":3,"file":"track-rage-click.js","sourceRoot":"","sources":["../../../src/autocapture/track-rage-click.ts"],"names":[],"mappings":";;;;AACA,6BAA+C;AAE/C,sCAA2E;AAC3E,0CAAoE;AACpE,4DAAuG;AAEvG,IAAI,oBAAoB,GAAG,6CAA4B,CAAC;AACxD,IAAI,oBAAoB,GAAG,6CAA4B,CAAC;AAExD,uDAAuD;AACvD,SAAgB,wBAAwB,CAAC,kBAA0B,EAAE,iBAAyB;IAC5F,oBAAoB,GAAG,kBAAkB,CAAC;IAC1C,oBAAoB,GAAG,iBAAiB,CAAC;AAC3C,CAAC;AAHD,4DAGC;AAgBD,SAAgB,eAAe,CAAC,EAQ/B;QAPC,SAAS,eAAA,EACT,cAAc,oBAAA,EACd,oBAAoB,0BAAA;IAMZ,IAAA,eAAe,GAAK,cAAc,gBAAnB,CAAoB;IAE3C,gFAAgF;IAChF,IAAM,mBAAmB,GAAG,eAAe,CAAC,IAAI,CAC9C,IAAA,aAAM,EAAC,qCAA2B,CAAC,EACnC,IAAA,aAAM,EAAC,UAAC,KAAK;QACX,OAAO,oBAAoB,CAAC,OAAO,EAAE,KAAK,CAAC,sBAAsB,CAAC,CAAC;IACrE,CAAC,CAAC,EACF,IAAA,iBAAU,EAAC,oBAAoB,CAAC,EAChC,IAAA,aAAM,EAAC,UAAC,MAAM;QACZ,iDAAiD;QACjD,IAAI,MAAM,CAAC,MAAM,GAAG,oBAAoB,EAAE;YACxC,OAAO,KAAK,CAAC;SACd;QAED,kFAAkF;QAClF,IAAI,aAAa,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QACtC,IAAM,eAAe,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC;QAC3D,OAAO,EAAE,aAAa,IAAI,MAAM,CAAC,MAAM,GAAG,oBAAoB,EAAE;YAC9D,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,eAAe,EAAE;gBAC1D,OAAO,KAAK,CAAC;aACd;SACF;QAED,gGAAgG;QAChG,gCAAgC;QAChC,OAAO,IAAI,CAAC;IACd,CAAC,CAAC,EACF,IAAA,UAAG,EAAC,UAAC,MAAM;QACT,IAAM,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC5C,IAAM,cAAc,sBAClB,wBAAwB,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,EACtE,sBAAsB,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,EACnE,sBAAsB,EAAE,SAAS,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,EAClE,oBAAoB,EAAE,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,CAAC;gBAC3C,CAAC,EAAG,KAAK,CAAC,KAAoB,CAAC,OAAO;gBACtC,CAAC,EAAG,KAAK,CAAC,KAAoB,CAAC,OAAO;gBACtC,IAAI,EAAE,KAAK,CAAC,SAAS;aACtB,CAAC,EAJ0C,CAI1C,CAAC,EACH,yBAAyB,EAAE,MAAM,CAAC,MAAM,IACrC,UAAU,CAAC,uBAAuB,CACtC,CAAC;QACF,OAAO,EAAE,cAAc,gBAAA,EAAE,IAAI,EAAE,UAAU,CAAC,SAAS,EAAE,CAAC;IACxD,CAAC,CAAC,CACH,CAAC;IAEF,OAAO,mBAAmB,CAAC,SAAS,CAAC,UAAC,EAAwB;YAAtB,cAAc,oBAAA,EAAE,IAAI,UAAA;QAC1D,SAAS,CAAC,KAAK,CAAC,gDAAoC,EAAE,cAAc,EAAE,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;AACL,CAAC;AA3DD,0CA2DC","sourcesContent":["import { AllWindowObservables } from 'src/autocapture-plugin';\nimport { filter, map, bufferTime } from 'rxjs';\nimport { BrowserClient } from '@amplitude/analytics-core';\nimport { filterOutNonTrackableEvents, shouldTrackEvent } from '../helpers';\nimport { AMPLITUDE_ELEMENT_RAGE_CLICKED_EVENT } from '../constants';\nimport { DEFAULT_RAGE_CLICK_THRESHOLD, DEFAULT_RAGE_CLICK_WINDOW_MS } from '@amplitude/analytics-core';\n\nlet RAGE_CLICK_THRESHOLD = DEFAULT_RAGE_CLICK_THRESHOLD;\nlet RAGE_CLICK_WINDOW_MS = DEFAULT_RAGE_CLICK_WINDOW_MS;\n\n// allow override of rage click config for testing only\nexport function _overrideRageClickConfig(rageClickThreshold: number, rageClickWindowMs: number) {\n  RAGE_CLICK_THRESHOLD = rageClickThreshold;\n  RAGE_CLICK_WINDOW_MS = rageClickWindowMs;\n}\n\ntype Click = {\n  X: number;\n  Y: number;\n  Time: number;\n};\n\ntype EventRageClick = {\n  '[Amplitude] Begin Time': string; // ISO-8601\n  '[Amplitude] End Time': string; // ISO-8601\n  '[Amplitude] Duration': number;\n  '[Amplitude] Clicks': Array<Click>;\n  '[Amplitude] Click Count': number;\n};\n\nexport function trackRageClicks({\n  amplitude,\n  allObservables,\n  shouldTrackRageClick,\n}: {\n  amplitude: BrowserClient;\n  allObservables: AllWindowObservables;\n  shouldTrackRageClick: shouldTrackEvent;\n}) {\n  const { clickObservable } = allObservables;\n\n  // Buffer clicks within a RAGE_CLICK_WINDOW_MS window and filter for rage clicks\n  const rageClickObservable = clickObservable.pipe(\n    filter(filterOutNonTrackableEvents),\n    filter((click) => {\n      return shouldTrackRageClick('click', click.closestTrackedAncestor);\n    }),\n    bufferTime(RAGE_CLICK_WINDOW_MS),\n    filter((clicks) => {\n      // filter if not enough clicks to be a rage click\n      if (clicks.length < RAGE_CLICK_THRESHOLD) {\n        return false;\n      }\n\n      // filter if the last RAGE_CLICK_THRESHOLD clicks were not all on the same element\n      let trailingIndex = clicks.length - 1;\n      const lastClickTarget = clicks[trailingIndex].event.target;\n      while (--trailingIndex >= clicks.length - RAGE_CLICK_THRESHOLD) {\n        if (clicks[trailingIndex].event.target !== lastClickTarget) {\n          return false;\n        }\n      }\n\n      // if we reach here that means the last RAGE_CLICK_THRESHOLD clicks were all on the same element\n      // and thus we have a rage click\n      return true;\n    }),\n    map((clicks) => {\n      const firstClick = clicks[0];\n      const lastClick = clicks[clicks.length - 1];\n      const rageClickEvent: EventRageClick = {\n        '[Amplitude] Begin Time': new Date(firstClick.timestamp).toISOString(),\n        '[Amplitude] End Time': new Date(lastClick.timestamp).toISOString(),\n        '[Amplitude] Duration': lastClick.timestamp - firstClick.timestamp,\n        '[Amplitude] Clicks': clicks.map((click) => ({\n          X: (click.event as MouseEvent).clientX,\n          Y: (click.event as MouseEvent).clientY,\n          Time: click.timestamp,\n        })),\n        '[Amplitude] Click Count': clicks.length,\n        ...firstClick.targetElementProperties,\n      };\n      return { rageClickEvent, time: firstClick.timestamp };\n    }),\n  );\n\n  return rageClickObservable.subscribe(({ rageClickEvent, time }) => {\n    amplitude.track(AMPLITUDE_ELEMENT_RAGE_CLICKED_EVENT, rageClickEvent, { time });\n  });\n}\n"]}