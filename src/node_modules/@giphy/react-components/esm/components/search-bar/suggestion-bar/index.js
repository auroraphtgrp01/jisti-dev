var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
import styled from '@emotion/styled';
import React, { useContext } from 'react';
import { SearchContext } from '../context';
import { getSize } from '../theme';
import { ChannelPill, TrendingSearchPill } from './pills';
var Container = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    display: flex;\n    color: white;\n    flex-direction: row;\n    font-family: 'interface';\n    font-weight: 600;\n    font-size: 14px;\n    -webkit-overflow-scrolling: touch;\n    overflow-x: auto;\n    overflow-y: hidden;\n    padding-bottom: 10px;\n    ", "\n"], ["\n    display: flex;\n    color: white;\n    flex-direction: row;\n    font-family: 'interface';\n    font-weight: 600;\n    font-size: 14px;\n    -webkit-overflow-scrolling: touch;\n    overflow-x: auto;\n    overflow-y: hidden;\n    padding-bottom: 10px;\n    ", "\n"])), function (props) { return getSize(props.theme); });
var SuggestionBar = function () {
    var _a = useContext(SearchContext), trendingSearches = _a.trendingSearches, currentChannels = _a.currentChannels;
    return (React.createElement(Container, { className: SuggestionBar.className }, currentChannels.length > 0
        ? currentChannels.map(function (channel) { return React.createElement(ChannelPill, { key: channel.id, channel: channel }); })
        : trendingSearches.map(function (trendingSearch) { return (React.createElement(TrendingSearchPill, { key: trendingSearch, trendingSearch: trendingSearch })); })));
};
SuggestionBar.className = 'giphy-suggestion-bar';
export default SuggestionBar;
var templateObject_1;
//# sourceMappingURL=index.js.map